#!/usr/bin/perl -w

#
# In dieser Datei wird im wesentlichen die Oberflaeche und ihr Verhalten 
# implementiert. 
#

use strict;
# use diagnostics;
use Charakter;
use Spruch;
use Erps;
use Tk;
use Tk::BrowseEntry;
use Tk::Radiobutton;
use Tk::Table;
use Tk::LabFrame;
use POSIX;
require "config.pl";

#
# Wahrscheinlichkeitstabelle vorberechnen
#

&Erps::WS_Generator();

# alle Module im Verzeichnis $spruchdir sind verfuegbar...
# und werden in eine liste  eingetragen
opendir(SPRUECHE,$::SPRUCHDIR) || 
     die "Kann Verzeichnis $::SPRUCHDIR nicht oeffnen\n";
while($_ = readdir(SPRUECHE)){
     next if( ! (/^.*\.sp$/)); # nur *.sp-files
     s/^(.*)\.sp$/$1/;
     my $spruchname = $_;
     my $spruch = Spruch->new($spruchname);
     $::sprueche->{$spruchname} = $spruch;
     push(@::spruchliste,$spruchname);
}
closedir SPRUECHE;

# Alle Charaktere im gleichnamigen Verzeichnis verfuegbar machen
#
opendir(CHARS,$::CHARDIR) || 
     die "Kann Verzeichnis $::CHARDIR nicht oeffnen\n";
while($_ = readdir(CHARS)){
     next if( ! (/.*\.ch$/)); # nur *.ch-files
     s/^(.*?)\.ch$/$1/;
     my $charaktername = $_;
     my $char = Charakter->new($charaktername);
     $::chars->{$charaktername} = $char;
     push(@::charliste,$_);
}
closedir CHARS;

# jetzt die ganzen Spruchmodule einlesen...
# $::use = "";
# foreach $::spru (@::spruchliste){
#     $::use = $::use . "use Sprueche::$::spru;";
# }

# erstaunlich, das das so ueberhaupt funktioniert...
# eval $::use;

# erstmal nur der default-Char
$::stoffel = $::chars->{$::DEFAULT_CHARAKTER};

# nur der Defaultspruch...
# $::sprucho = Schockstrahl->new();
# $::sprucho = Spruch->new('Elementstrahl');
$::sprucho = $::sprueche->{$::DEFAULT_SPRUCH};
$::sprucho_alt = $::sprucho;

$::top = MainWindow->new();
$::top->title("ZAUBER-o-MAT Version 0.2");

$::oben_frame = $::top->Frame();
$::input_frame = $::oben_frame->LabFrame
     (-label => 'Eingabe',
      -labelside => 'acrosstop');
$::output_frame= $::oben_frame->LabFrame
     (-label => 'Ausgabe',
      -labelside => 'acrosstop',
      -background => $::BGCOLOR);
$::command_frame=$::top->Frame(-background => $::BGCOLOR);

#
# Die Eingabeseite
#


$::charname = $::DEFAULT_CHARAKTER;
$::charwahl = $::input_frame->BrowseEntry(-label => 'Charakter: ',
					-variable => \$::charname,
					-browsecmd => \&char_aktualisieren);

$::charwahl->Subwidget('entry')->bind('<Key-Return>',
					      \&char_aktualisieren);

# nur die verfuegbaren charaktere werden auch eingetragen
foreach my $char (@::charliste){
     $::charwahl->insert('end',$char);
}

$::char_frame = $::input_frame->LabFrame
     (-label => $::stoffel->{'Name'},
      -labelside => 'acrosstop',
      -background => $::BGCOLOR);

$::char_links_frame = $::char_frame->Frame();
$::char_rechts_frame = $::char_frame->Frame();

#  my $PSI_txt = "PSI: " . $::stoffel->{'Basisattribut'}->{'PSI'};
#  $::PSI = $::char_frame->Label(-text => $PSI_txt);  
#my $PSE_txt = "PSE: " . $::stoffel->{'Fertigkeit'}->{'PSE'};
#$::PSE = $::char_frame->Label(-text => $PSE_txt);  
#my $magtheo_txt = "Magietheorie: " . 
#     $::stoffel->{'Fertigkeit'}->{'Magietheorie'};
#$::magietheorie = $::char_frame->Label(-text => $magtheo_txt);  
my $fert_text = "Fertigkeit: ???";
$::Fertigkeit = $::char_links_frame->Label(-text => $fert_text);  
my $proz_text = "Prozente: ???";
$::Prozente = $::char_links_frame->Label(-text => $proz_text);  

$::PSI = $::char_rechts_frame->
     LabEntry(-textvariable => 
	      \$::stoffel->{'Basisattribut'}->{'PSI'},
	      -width => 2,
	      -label => 'PSI:',
	      -labelPack => [ -side => 'left']);

$::PSI->bind('<Key-Return>',\&spruch_aktualisieren);

$::PSE = $::char_links_frame->
     LabEntry(-textvariable => 
	      \$::stoffel->{'Fertigkeit'}->{'PSE'},
	      -width => 2,
	      -label => 'PSE:',
	      -labelPack => [ -side => 'left']);

$::PSE->bind('<Key-Return>',\&aktualisieren);

$::magietheorie = $::char_rechts_frame->
     LabEntry(-textvariable => 
	      \$::stoffel->{'Fertigkeit'}->{'Magietheorie'},
	      -width => 2,
	      -label => 'Magietheorie:',
	      -labelPack => [ -side => 'left']);

$::magietheorie->bind('<Key-Return>',\&aktualisieren);

# $::fertigkeit = $::char_frame->
#     LabEntry(-textvariable => 
#	      \$::stoffel->{'Fertigkeit'}->{''},
#	      -width => 2,
#	      -label => 'Magietheorie:',
#	      -labelPack => [ -side => 'left']);
#
# $::PSE->bind('<Key-Return>',\&aktualisieren);

#  my $PSE_txt = "PSE: " . $::stoffel->{'Fertigkeit'}->{'PSE'};
#  $::PSE = $::char_frame->Label(-text => $PSE_txt);  
#  my $magtheo_txt = "Magietheorie: " . 
#       $::stoffel->{'Fertigkeit'}->{'Magietheorie'};
#  $::magietheorie = $::char_frame->Label(-text => $magtheo_txt);  
#  my $fert_text = "Fertigkeit: ???";
#  $::Fertigkeit = $::char_frame->Label(-text => $fert_text);  
#  my $proz_text = "Prozente: ???";
#  $::Prozente = $::char_frame->Label(-text => $proz_text);  



$::allgemein_frame = $::input_frame->LabFrame
     (-label => 'Allgemeines',
      -labelside => 'acrosstop',
      -background => $::BGCOLOR);

# $::spruch = "Schockstrahl";
$::spruch = "Elementstrahl";
$::spruchwahl = $::allgemein_frame->BrowseEntry(-label => 'Spruch: ',
					-variable => \$::spruch,
					-browsecmd => \&spruch_aktualisieren);

# nur die verfuegbaren sprueche werden auch eingetragen
foreach $::spru (@::spruchliste){
     $::spruchwahl->insert('end',$::spru);
}

$::spruchwahl->Subwidget('entry')->bind('<Key-Return>',
					      \&spruch_aktualisieren);

$::spruch_frame = $::input_frame->LabFrame
     (-label => 'Spruchabh�ngige Parameter',
      -labelside => 'acrosstop',
      -background => $::BGCOLOR);

$::dauer = $::sprucho->{'Dauer'};
$::dauer_wahl = $::allgemein_frame->BrowseEntry
     (-label => 'Spruchdauer: ', 
      -variable => \$::dauer,
      -browsecmd => \&aktualisieren);

$::dauer_wahl->insert('end', 'Sofortiger Zauber'); 
$::dauer_wahl->insert('end', 'Rundenzauber'); 
$::dauer_wahl->insert('end', 'Minutenzauber'); 
$::dauer_wahl->insert('end', 'Stundenzauber'); 
$::dauer_wahl->insert('end', 'Tagezauber'); 
$::dauer_wahl->Subwidget('entry')->bind('<Key-Return>',
					      \&aktualisieren);
$::mw_mod = 0;
$::mw_mod_wahl = $::allgemein_frame->BrowseEntry
     (-label => 'MW-Modifikationen: ', 
      -variable => \$::mw_mod,
      -browsecmd => \&aktualisieren);

for($::i = 0; $::i != 20; $::i++){
     $::mw_mod_wahl->insert('end', $::i); 
}
$::mw_mod_wahl->Subwidget('entry')->bind('<Key-Return>',
					      \&aktualisieren);

$::wuerfel_mod = 0;
$::wuerfel_mod_wahl = $::allgemein_frame->BrowseEntry
     (-label => 'Wuerfel-Modifikationen: ', 
      -variable => \$::wuerfel_mod,
      -browsecmd => \&aktualisieren);

for($::i = -10; $::i != 10; $::i++){
     $::wuerfel_mod_wahl->insert('end', $::i); 
}
$::wuerfel_mod_wahl->Subwidget('entry')->bind('<Key-Return>',
					      \&aktualisieren);
$::gesenkt_um = 0;
$::gesenkt_wahl = $::allgemein_frame->BrowseEntry
     (-label => 'gesenkt um: ', 
      -variable => \$::gesenkt_um,
      -browsecmd => \&aktualisieren);

for($::i = 0; $::i != 20; $::i++){
     $::gesenkt_wahl->insert('end', $::i); 
}

$::gesenkt_wahl->Subwidget('entry')->bind('<Key-Return>',
					      \&aktualisieren);

$::ist_negativ = 0;
$::check_negativ = $::allgemein_frame->Checkbutton
	  (-text => 'nach dem Senken negative Psi-Punkte',
	   -command => \&::aktualisieren,
	   -variable => \$::ist_negativ,
	   -onvalue => '1',
	   -offvalue => '0');

$::exit_button = $::command_frame->Button(-text => "Exit",
				      -command => \&exit);

#
# Die Ausgabe-Seite
#

$::mw_frame = $::output_frame->LabFrame
     (-label => 'Mindestw�rfe',
      -labelside => 'acrosstop');

$::MWG = $::mw_frame->Label(-text => 'Grund-MW: 0');
$::MWU = $::mw_frame->Label(-text => 'MW-Ungesenkt: 0');
$::MWS = $::mw_frame->Label(-text => 'MW-Gesenkt: 0');

$::table_frame = $::output_frame->LabFrame
     (-label => 'W�rfeltabelle',
      -labelside => 'acrosstop');

$::tabelle = $::table_frame->Table(-rows => $::MAX_TABLE,
					    -columns => 4,
					    -scrollbars => 0);

$::tabelle->put(0,0,'Gewuerfelt');
$::tabelle->put(0,1,'Ergebnis');
$::tabelle->put(0,2,'PSI-Kosten');
$::tabelle->put(0,3,'WS');

$::ws_fert = $::table_frame->Label
     (-text => 'Erfolgswahrscheinlichkeit: ??');
$::ws_lp =  $::table_frame->Label
     (-text => 'Lernpunktwahrscheinlichkeit: ??');
$::ws_magtheo = $::table_frame->Label
     (-text => 'Magietheoriewahrscheinlichkeit: ??');
$::ws_magtheo_lp =  $::table_frame->Label
     (-text => 'Lernpunkt-Magietheorie-wahrscheinlichkeit: ??');

$::spruch_out_frame = $::output_frame->LabFrame
     (-label => 'Spruchabh�ngige Ausgaben',
      -labelside => 'acrosstop',
      -background => $::BGCOLOR);

$::sprucho->create_oberflaeche();

#
# Packung!
#

$::oben_frame->pack(-side => 'top', -anchor => 'n');
$::input_frame->pack(-side => 'left', -anchor => 'n');
$::charwahl->pack(-anchor => 'w');
$::char_frame->pack( -anchor => 'w', -fill => 'x');
$::char_links_frame->pack( -anchor => 'w', -fill => 'x',
			       -side => 'left', -expand => 'both');
$::char_rechts_frame->pack( -anchor => 'n', -fill => 'x', 
				-side => 'left', -expand => 'both');
$::allgemein_frame->pack( -anchor => 'w', -fill => 'x');
$::spruch_frame->pack( -anchor => 'w', -fill => 'x');
$::mw_frame->pack( -anchor => 'w', -fill => 'x');
$::table_frame->pack( -anchor => 'w', -fill => 'x');
$::spruch_out_frame->pack( -anchor => 'w', -fill => 'x');
$::output_frame->pack(-side => 'left', -anchor => 'n');
$::command_frame->pack(-side => 'bottom');

$::exit_button->pack();

$::spruchwahl->pack(-anchor => 'e');

# auch hier: dynamisch!!!
$::sprucho->pack();

$::dauer_wahl->pack(-anchor => 'e');
$::mw_mod_wahl->pack(-anchor => 'e');
$::wuerfel_mod_wahl->pack(-anchor => 'e');
$::gesenkt_wahl->pack(-anchor => 'e');
$::check_negativ->pack(-anchor => 'e');
$::PSI->pack(-anchor => 'e');
$::PSE->pack(-anchor => 'e');
$::magietheorie->pack(-anchor => 'e');
$::Fertigkeit->pack(-anchor => 'e');
$::Prozente->pack(-anchor => 'e');

$::MWG->pack(-anchor => 'w');
$::MWU->pack(-anchor => 'w');
$::MWS->pack(-anchor => 'w');

$::tabelle->pack();
$::ws_fert->pack(-anchor => 'e');
$::ws_lp->pack(-anchor => 'e');
$::ws_magtheo->pack(-anchor => 'e');
$::ws_magtheo_lp->pack(-anchor => 'e');

&spruch_aktualisieren;
# &aktualisieren;
&MainLoop;

#
# Diese Funktion wird ausgefuehrt, wenn ein Charakter ausgewaehlt wurde
#
sub char_aktualisieren{


     $::stoffel = $::chars->{$::charname};

     $::PSI->delete(0,'end');
     $::PSI->insert(0,$::stoffel->{'Basisattribut'}->{'PSI'});
     
     $::PSE->delete(0,'end');
     $::PSE->insert(0,$::stoffel->{'Fertigkeit'}->{'PSE'});
#     my $magtheo_txt = "PSE: " . 
     $::magietheorie->delete(0,'end');
     $::magietheorie->insert
	  (0, $::stoffel->{'Fertigkeit'}->{'Magietheorie'});

     $::char_frame->configure(-label => $::stoffel->{'Name'});
     
     &spruch_aktualisieren;
}

#
# Diese Funktion wird ausgefuehrt, wenn ein Spruch ausgewaehlt wurde
#

sub spruch_aktualisieren{

     # zuerst die alte oberflaeche vernichten
     my $spruchabhaengig = $::sprucho_alt->get_spruchabhaengig();

     my $widget;
     foreach $widget (@$spruchabhaengig){
#	  print "zu zerstoerendes Widget: $widget\n";
	  $widget->destroy() if(Exists($widget));
     }

     $::sprucho = $::sprueche->{$::spruch};

     # die neue oberflaeche erzeugen und packen
     $::sprucho->create_oberflaeche();
     $::sprucho->pack();
     $::sprucho_alt = $::sprucho;

     # neue Zauberdauer eintragen
     $::dauer = $::sprucho->{'Dauer'};

     &aktualisieren;
}

# Diese Funktion wird bei so gut wie jeder Oberflaecheninteraktion
# ausgefuehrt
# TODO: aufspalten dieser Funktion. bisserl gross geworden...

sub aktualisieren{

#
# Wir berechnen die neue MW-Erhoehungsvorgabe anhand nicht-gekonnter
# Fertigkeiten
#

     $::mw_mod += $::stoffel->get_erhoehung
	  ($::sprucho->{'Fertigkeit'});
     if(&Erps::ist_psi($::sprucho->{'Fertigkeit'})){
	  $::mw_mod += $::stoffel->get_erhoehung('PSE');
     }

     my $mws = $::sprucho->aktualisieren();

#
# Der Bonus auf den Wuerfelwurf wird ausgerechnet
#
     my $bonus = $::stoffel->bonus($::sprucho->{'Fertigkeit'});
     $::stoffel->{'Bonus'} = $bonus;

# das selbe fuer magtheo

     my $m_bonus = $::stoffel->
	  magtheo_bonus($::sprucho->{'Fertigkeit'});
     $::stoffel->{'Magtheo_Bonus'} = $m_bonus;

     $::MWG->configure(-text => "unmodifizierter MW: $mws->{'Grund'}");
     $::MWU->configure
	  (-text => "MW nach Prozenten und Modifikationen: ".
	   "$mws->{'Ungesenkt'}");
     $::MWS->configure(-text => "MW-Gesenkt: $mws->{'Gesenkt'}");
     # diverse wahrscheinlichkeiten ausrechnen

     #
     # Probleme im Zusammenhang mit Wahrscheinlichkeiten:
     #    - Summe in der Tabelle gibt immer 91% statt 100%
     #    - diese 9% fehlen immer im hinteren Teil
     #    - Wenn nur die 1-1 faild: 100% Erfolg statt 99%

     if($bonus > 0){
	  $::tabelle->put(0,0,"Gewuerfelt (+$bonus)");
     }elsif($bonus < 0){
	  $::tabelle->put(0,0,"Gewuerfelt (-$bonus)");
     }else{
	  $::tabelle->put(0,0,"Gewuerfelt");
     }
     my $ws = Erps::WS_Fert($mws->{'Gesenkt'} - $bonus);
     $ws = sprintf('%.' . $::KOMMA . 'f',$ws);
     $::ws_fert->configure
	  (-text => "Erfolgswahrscheinlichkeit: $ws \%");
     $ws = Erps::WS_LP($mws->{'Gesenkt'} - $bonus);
     $ws = sprintf('%.' . $::KOMMA . 'f',$ws);
     $::ws_lp->configure
	  (-text => "Lernpunktwahrscheinlichkeit: $ws \%");
     $ws = Erps::WS_Magtheo($mws->{'Gesenkt'} - $m_bonus,
			    $mws->{'Ungesenkt'} - $m_bonus);
     $ws = sprintf('%.' . $::KOMMA . 'f',$ws);
     $::ws_magtheo->configure
	  (-text => "Magietheoriewahrscheinlichkeit: $ws \%");
     $ws = Erps::WS_Magtheo_LP($mws->{'Gesenkt'} - $m_bonus,
			       $mws->{'Ungesenkt'} - $m_bonus);
     $ws = sprintf('%.' . $::KOMMA . 'f',$ws);
     $::ws_magtheo_lp->configure
	  (-text => "Lernpunkt-Magietheorie-Wahrscheinlichkeit: $ws \%");
     $::Prozente->configure
	  (-text => "Prozente: " .
	   $::stoffel->get_prozente($::sprucho->get_name()). "%");
     my $bereich = $::sprucho->{'Fertigkeit'};
     if(defined($::stoffel->{'Fertigkeit'}->{$bereich})){
	  $::Fertigkeit->configure
	  (-text => "$bereich: " .
	   $::stoffel->{'Fertigkeit'}->{$bereich});
     }else{
	  $::Fertigkeit->configure
	  (-text => "$bereich: nicht vorhanden");
     }
	   
#
# Hier wird jetzt die Tabelle gefuellt
#

# zunaechst muessen wir sie mal leeren ...

     for($::y = 1; $::y != $::MAX_TABLE; $::y++){
	  for($::x = 0; $::x != 4;$::x++){
	       $::tabelle->put($::y,$::x,"");
	  }
     }
     my $wurf;
     my $zeilen_anfang = 2;
     my ($ergebnis,$gewuerfelt_text);
     my $zeile = 1;
#     $::stoffel->{'Bonus'} = 
#	  $::stoffel->bonus($::sprucho->{'Fertigkeit'});
     my $alt_ergebnis = $::stoffel->berechne_ergebnis
	       ($mws->{'Gesenkt'},
		2,
		$::sprucho->{'Fertigkeit'});;
     for ($wurf = 2;$wurf != $::MAXWURF; $wurf++){

	  $ergebnis = $::stoffel->berechne_ergebnis
	       ($mws->{'Gesenkt'},
		$wurf,
		$::sprucho->{'Fertigkeit'});
	  # zeilensprung in der Tabelle!
	  if($ergebnis != $alt_ergebnis || $wurf == $::MAXWURF-1){
	       my $WS;
	       # nur ein einzelnes Ergebnis in der Zeile?
	       if($wurf-1 != $zeilen_anfang){
		    my $wurf1 = $wurf-1;
		    $gewuerfelt_text = "$zeilen_anfang - $wurf1";
		    $WS = Erps::WS_zwischen($zeilen_anfang,$wurf1);
	       }else{
		    $gewuerfelt_text = "$zeilen_anfang";
		    $WS = Erps::WS_eq($zeilen_anfang);
	       }
	       $WS = sprintf('%.' . $::KOMMA . 'f %%',$WS);
	       
	       if($zeile < $::MAX_TABLE && $alt_ergebnis != 0){
		    $::tabelle->put($zeile,0,$gewuerfelt_text);
		    $::tabelle->put($zeile,1,Erps::decode($alt_ergebnis));
		    $::tabelle->put($zeile,3,$WS);

		    my $kosten;
		    my $normal_kosten;
		    my $runden_mod = 0;
		    $runden_mod = 0.5 unless $::PSIKOSTEN_ABRUNDEN;		    
		    if(! $::ist_negativ){
			 $normal_kosten = floor(Erps::berechne_PSI_Kosten
						($alt_ergebnis, 
					    Erps::standard_psi_kosten
						 ($mws->{'Gesenkt'}))+$runden_mod);
			 $kosten = $::gesenkt_um + $normal_kosten;
		    }else{
			 # doppelte kosten im negativen
			 $normal_kosten = 2*floor(Erps::berechne_PSI_Kosten
						($alt_ergebnis, 
					    Erps::standard_psi_kosten
						 ($mws->{'Gesenkt'}))+$runden_mod);
			 $kosten = $::gesenkt_um + $normal_kosten;
		    }
		    # kann bei negativen Wuerfelmodifikationen
		    # passieren
		    $kosten = "unendlich" if 
			 ($alt_ergebnis == -$::UNENDLICH);

		    $::tabelle->put
			 ($zeile,2,
			  "$normal_kosten + $::gesenkt_um = $kosten");
	       }
						
	       $zeile++;
	       $zeilen_anfang = $wurf;
	  }
	  $alt_ergebnis = $ergebnis;
     }

}








